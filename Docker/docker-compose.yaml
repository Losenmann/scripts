version: "3.9"
networks:
  nginx-proxy:
    name: "nginx-proxy"

services:
  nginx-proxy:
    container_name: Nginx-Proxy
    image: jwilder/nginx-proxy
    networks:
      - nginx-proxy
    ports:
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /opt/revers-proxy/certs:/etc/nginx/certs
    tty: true
    restart: always

  portainer:
    container_name: Portainer
    image: portainer/portainer
    networks:
      - nginx-proxy
    expose:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/portainer/data:/data
    environment:
        - VIRTUAL_HOST=${P_VIRTUAL_HOST_PORTAINER}
        - VIRTUAL_PORT=9000
    restart: always

  postgres-pro:
    container_name: PostgresPro
    image: postgrespro
    build:
      context: .
      dockerfile: "./dockerfile/PostgresPro.dockerfile"
      args:
        - vers=${P_POSTGRESPRO_VERSION}
    network_mode: bridge
    ports:
      - 5432:5432
    volumes:
      - postgrespro:/var/lib/pgpro
    tty: true
    stdin_open: true

  iptv-services:
    container_name: "IPTV-Services"
    image: iptv-services
    build:
      context: 'https://raw.githubusercontent.com/Losenmann/scripts/master/Docker/iptv.dockerfile'
    network_mode: host
    expose:
      - 4022
    restart: always

  zabbix-server:
    container_name: "Zabbix-Server"
    image: zabbix-server
    build:
      context: .
      dockerfile: "./dockerfile/Zabbix.dockerfile"
    networks:
      - nginx-proxy
    expose:
      - 10051
      - 8080
    environment:
      - VIRTUAL_HOST=${P_VIRTUAL_HOST_ZABBIX}
      - VIRTUAL_PORT=8080
      - DB_SERVER_HOST=mysql-server
      - MYSQL_DATABASE=${MYSQL_DB_ZBX}
      - MYSQL_USER=${MYSQL_USER_ZBX}
      - MYSQL_PASSWORD=${MYSQL_PASS_ZBX}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASS}
    links:
      - postgres-pro
    restart: always

volumes:
  postgrespro:
   driver: local
