version: "3.9"
services:
  nginx-proxy:
    container_name: "Nginx-Proxy"
    image: "jwilder/nginx-proxy"
    networks:
      - nginx-proxy
    ports:
      - 443:443
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /opt/revers-proxy/certs:/etc/nginx/certs
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    tty: true
    restart: always

  portainer:
    container_name: "Portainer"
    image: "portainer/portainer"
    networks:
      - nginx-proxy
    expose:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    environment:
      - VIRTUAL_HOST=${ENV_VIRTUAL_HOST_PORTAINER:-portainer.example.loc}
      - VIRTUAL_PORT=${ENV_VIRTUAL_PORT_PORTAINER:-9000}
    depends_on:
      - nginx-proxy
    tty: true
    restart: always

  postgres-pro:
    container_name: "PostgresPro"
    image: "postgres-pro"
    build:
      context: "https://raw.githubusercontent.com/Losenmann/scripts/master/Docker/Dockerfiles/postgres-pro.dockerfile"
      args:
        - DB_VERSION=${ENV_DB_VERSION:-std-15}
        - DB_ADMIN=${ENV_DB_ADMIN:-admin}
        - DB_PASSWORD=${ENV_DB_PASSWORD:-pgpassword}
    networks:
      - network-db
    ports: 
      - 5432:5432
    volumes:
      - postgrespro:/var/lib/pgpro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    tty: true
    restart: always

  iptv-service:
    container_name: "IPTV-Service"
    image: "iptv-service"
    build:
      context: "https://raw.githubusercontent.com/Losenmann/scripts/master/Docker/Dockerfiles/iptv-service.dockerfile"
    network_mode: host
    expose:
      - 4022
    tty: true
    restart: always

  zabbix-server:
    container_name: "Zabbix-Srv"
    image: "zabbix/zabbix-server-pgsql:ubuntu-latest"
    networks:
      - network-db
      - network-zabbix
    ports:
      - 10051:10051
    environment:
      - DB_SERVER_HOST=${ENV_ZABBIX_DB_HOST:-postgres-pro}
      - POSTGRES_USER=${ENV_ZABBIX_DB_USER:-zabbix}
      - POSTGRES_PASSWORD=${ENV_ZABBIX_DB_PASSWORD:-zabbix}
    depends_on:
      - postgres-pro
    healthcheck:
      test: ["CMD", "nmap", "localhost", "-p10051", "|grep", "open", "||echo", "1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    tty: true
    restart: always

  zabbix-web:
    container_name: "Zabbix-Web"
    image: "zabbix/zabbix-web-nginx-pgsql:ubuntu-latest"
    networks:
      - network-db
      - network-zabbix
      - nginx-proxy
    expose:
      - 8080
    environment:
      - VIRTUAL_HOST=${ENV_VIRTUAL_HOST_ZABBIX:-zabbix.example.loc}
      - VIRTUAL_PORT=${ENV_VIRTUAL_PORT_ZABBIX:-8080}
      - DB_SERVER_HOST=${ENV_ZABBIX_DB_HOST:-postgres-pro}
      - POSTGRES_USER=${ENV_ZABBIX_DB_USER:-zabbix}
      - POSTGRES_PASSWORD=${ENV_ZABBIX_DB_PASSWORD:-zabbix}
      - ZBX_SERVER_HOST=${ENV_ZABBIX_SERVER_HOST:-zabbix-server}
      - ZBX_SERVER_NAME=${ENV_ZABBIX_SERVER_NAME:-Zabbix Docker}
      - PHP_TZ=${ENV_ZABBIX_TIMEZONE:-Asia/Krasnoyarsk}
    depends_on:
      - postgres-pro
      - zabbix-server
      - nginx-proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    tty: true
    restart: always

networks:
  nginx-proxy:
    name: "nginx-proxy"
    driver: "bridge"
    ipam:
      config:
        - subnet: "172.18.0.0/24"
          gateway: "172.18.0.1"
    internal: false
    attachable: true
  network-db:
    name: "network-db"
    driver: "bridge"
    ipam:
      config:
        - subnet: "172.18.1.0/24"
          gateway: "172.18.1.1"
    internal: false
    attachable: true
  network-zabbix:
    name: "network-zabbix"
    driver: "bridge"
    ipam:
      config:
        - subnet: "172.18.2.0/29"
          gateway: "172.18.2.1"
    internal: true
    attachable: false

volumes:
  postgrespro:
    name: "postgrespro"
    driver: local
  portainer:
    name: "portainer"
    driver: local
